{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":75250,"databundleVersionId":8266514,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-18T09:38:11.072693Z","iopub.execute_input":"2024-04-18T09:38:11.073081Z","iopub.status.idle":"2024-04-18T09:38:11.085998Z","shell.execute_reply.started":"2024-04-18T09:38:11.073052Z","shell.execute_reply":"2024-04-18T09:38:11.084965Z"},"trusted":true},"execution_count":137,"outputs":[{"name":"stdout","text":"/kaggle/input/robi-datathon-30-qualifier-problem-1/boxes.csv\n/kaggle/input/robi-datathon-30-qualifier-problem-1/sample submission 1.csv\n/kaggle/input/robi-datathon-30-qualifier-problem-1/problem 1.csv\n/kaggle/input/robi-datathon-30-qualifier-problem-1/purchase.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"boxs_df = pd.read_csv('/kaggle/input/robi-datathon-30-qualifier-problem-1/boxes.csv')\nboxs_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:11.090825Z","iopub.execute_input":"2024-04-18T09:38:11.091647Z","iopub.status.idle":"2024-04-18T09:38:11.107466Z","shell.execute_reply.started":"2024-04-18T09:38:11.091616Z","shell.execute_reply":"2024-04-18T09:38:11.106661Z"},"trusted":true},"execution_count":138,"outputs":[{"execution_count":138,"output_type":"execute_result","data":{"text/plain":"   BOX_ID  QUALITY      DELIVERY_OPTION  MILK  MEAT  UNIT_PRICE\n0       1  Premium  Home Delivery - CoD   0.0   2.7        9.96\n1       2  Premium  Home Delivery - CoD   0.0   2.3       11.96\n2       3  Premium  Home Delivery - CoD   0.0   2.4       11.96\n3       4  Premium  Home Delivery - CoD   0.0   2.5       11.96\n4       5  Premium  Home Delivery - CoD   0.0   2.6       11.96","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>BOX_ID</th>\n      <th>QUALITY</th>\n      <th>DELIVERY_OPTION</th>\n      <th>MILK</th>\n      <th>MEAT</th>\n      <th>UNIT_PRICE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Premium</td>\n      <td>Home Delivery - CoD</td>\n      <td>0.0</td>\n      <td>2.7</td>\n      <td>9.96</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Premium</td>\n      <td>Home Delivery - CoD</td>\n      <td>0.0</td>\n      <td>2.3</td>\n      <td>11.96</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Premium</td>\n      <td>Home Delivery - CoD</td>\n      <td>0.0</td>\n      <td>2.4</td>\n      <td>11.96</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Premium</td>\n      <td>Home Delivery - CoD</td>\n      <td>0.0</td>\n      <td>2.5</td>\n      <td>11.96</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Premium</td>\n      <td>Home Delivery - CoD</td>\n      <td>0.0</td>\n      <td>2.6</td>\n      <td>11.96</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"purchase_df = pd.read_csv('/kaggle/input/robi-datathon-30-qualifier-problem-1/purchase.csv')\npurchase_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:11.112096Z","iopub.execute_input":"2024-04-18T09:38:11.112621Z","iopub.status.idle":"2024-04-18T09:38:13.551475Z","shell.execute_reply.started":"2024-04-18T09:38:11.112591Z","shell.execute_reply":"2024-04-18T09:38:13.550548Z"},"trusted":true},"execution_count":139,"outputs":[{"execution_count":139,"output_type":"execute_result","data":{"text/plain":"  PURCHASE_DATE    MAGIC_KEY  BOX_ID  BOX_COUNT\n0      1/2/2019  2CED678A247    12.0        1.0\n1      1/2/2019  2BF58D91BA1    12.0        1.0\n2      1/2/2019  2C15B86534E    99.0        1.0\n3      1/2/2019  2C32D9A859A     6.0        1.0\n4      1/2/2019  2C7A55404D1     4.0        1.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PURCHASE_DATE</th>\n      <th>MAGIC_KEY</th>\n      <th>BOX_ID</th>\n      <th>BOX_COUNT</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1/2/2019</td>\n      <td>2CED678A247</td>\n      <td>12.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1/2/2019</td>\n      <td>2BF58D91BA1</td>\n      <td>12.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1/2/2019</td>\n      <td>2C15B86534E</td>\n      <td>99.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1/2/2019</td>\n      <td>2C32D9A859A</td>\n      <td>6.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1/2/2019</td>\n      <td>2C7A55404D1</td>\n      <td>4.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"purchase_df['BOX_ID'] = purchase_df['BOX_ID'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.553132Z","iopub.execute_input":"2024-04-18T09:38:13.553456Z","iopub.status.idle":"2024-04-18T09:38:13.718284Z","shell.execute_reply.started":"2024-04-18T09:38:13.553429Z","shell.execute_reply":"2024-04-18T09:38:13.713872Z"},"trusted":true},"execution_count":140,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIntCastingNaNError\u001b[0m                        Traceback (most recent call last)","Cell \u001b[0;32mIn[140], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m purchase_df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBOX_ID\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mpurchase_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mBOX_ID\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mint\u001b[39;49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:6640\u001b[0m, in \u001b[0;36mNDFrame.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   6634\u001b[0m     results \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m   6635\u001b[0m         ser\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy, errors\u001b[38;5;241m=\u001b[39merrors) \u001b[38;5;28;01mfor\u001b[39;00m _, ser \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m   6636\u001b[0m     ]\n\u001b[1;32m   6638\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6639\u001b[0m     \u001b[38;5;66;03m# else, only a single dtype is given\u001b[39;00m\n\u001b[0;32m-> 6640\u001b[0m     new_data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_mgr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6641\u001b[0m     res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_constructor_from_mgr(new_data, axes\u001b[38;5;241m=\u001b[39mnew_data\u001b[38;5;241m.\u001b[39maxes)\n\u001b[1;32m   6642\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m res\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mastype\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/internals/managers.py:430\u001b[0m, in \u001b[0;36mBaseBlockManager.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    427\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m using_copy_on_write():\n\u001b[1;32m    428\u001b[0m     copy \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m--> 430\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    431\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mastype\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    432\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    433\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    434\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    435\u001b[0m \u001b[43m    \u001b[49m\u001b[43musing_cow\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43musing_copy_on_write\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    436\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/internals/managers.py:363\u001b[0m, in \u001b[0;36mBaseBlockManager.apply\u001b[0;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[1;32m    361\u001b[0m         applied \u001b[38;5;241m=\u001b[39m b\u001b[38;5;241m.\u001b[39mapply(f, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    362\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 363\u001b[0m         applied \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mgetattr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    364\u001b[0m     result_blocks \u001b[38;5;241m=\u001b[39m extend_blocks(applied, result_blocks)\n\u001b[1;32m    366\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39mfrom_blocks(result_blocks, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/internals/blocks.py:758\u001b[0m, in \u001b[0;36mBlock.astype\u001b[0;34m(self, dtype, copy, errors, using_cow, squeeze)\u001b[0m\n\u001b[1;32m    755\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCan not squeeze with more than one column.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    756\u001b[0m     values \u001b[38;5;241m=\u001b[39m values[\u001b[38;5;241m0\u001b[39m, :]  \u001b[38;5;66;03m# type: ignore[call-overload]\u001b[39;00m\n\u001b[0;32m--> 758\u001b[0m new_values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_array_safe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    760\u001b[0m new_values \u001b[38;5;241m=\u001b[39m maybe_coerce_values(new_values)\n\u001b[1;32m    762\u001b[0m refs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/dtypes/astype.py:237\u001b[0m, in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    234\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m dtype\u001b[38;5;241m.\u001b[39mnumpy_dtype\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 237\u001b[0m     new_values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    238\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mValueError\u001b[39;00m, \u001b[38;5;167;01mTypeError\u001b[39;00m):\n\u001b[1;32m    239\u001b[0m     \u001b[38;5;66;03m# e.g. _astype_nansafe can fail on object-dtype of strings\u001b[39;00m\n\u001b[1;32m    240\u001b[0m     \u001b[38;5;66;03m#  trying to convert to float\u001b[39;00m\n\u001b[1;32m    241\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/dtypes/astype.py:182\u001b[0m, in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    179\u001b[0m     values \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy)\n\u001b[1;32m    181\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 182\u001b[0m     values \u001b[38;5;241m=\u001b[39m \u001b[43m_astype_nansafe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    184\u001b[0m \u001b[38;5;66;03m# in pandas we don't store numpy str dtypes, so convert to object\u001b[39;00m\n\u001b[1;32m    185\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, np\u001b[38;5;241m.\u001b[39mdtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28missubclass\u001b[39m(values\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mtype, \u001b[38;5;28mstr\u001b[39m):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/dtypes/astype.py:101\u001b[0m, in \u001b[0;36m_astype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m     96\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mensure_string_array(\n\u001b[1;32m     97\u001b[0m         arr, skipna\u001b[38;5;241m=\u001b[39mskipna, convert_na_value\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m     98\u001b[0m     )\u001b[38;5;241m.\u001b[39mreshape(shape)\n\u001b[1;32m    100\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m np\u001b[38;5;241m.\u001b[39missubdtype(arr\u001b[38;5;241m.\u001b[39mdtype, np\u001b[38;5;241m.\u001b[39mfloating) \u001b[38;5;129;01mand\u001b[39;00m dtype\u001b[38;5;241m.\u001b[39mkind \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124miu\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m--> 101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_astype_float_to_int_nansafe\u001b[49m\u001b[43m(\u001b[49m\u001b[43marr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    103\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m arr\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mobject\u001b[39m:\n\u001b[1;32m    104\u001b[0m     \u001b[38;5;66;03m# if we have a datetime/timedelta array of objects\u001b[39;00m\n\u001b[1;32m    105\u001b[0m     \u001b[38;5;66;03m# then coerce to datetime64[ns] and use DatetimeArray.astype\u001b[39;00m\n\u001b[1;32m    107\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mis_np_dtype(dtype, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mM\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/dtypes/astype.py:145\u001b[0m, in \u001b[0;36m_astype_float_to_int_nansafe\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    142\u001b[0m \u001b[38;5;124;03mastype with a check preventing converting NaN to an meaningless integer value.\u001b[39;00m\n\u001b[1;32m    143\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    144\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m np\u001b[38;5;241m.\u001b[39misfinite(values)\u001b[38;5;241m.\u001b[39mall():\n\u001b[0;32m--> 145\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m IntCastingNaNError(\n\u001b[1;32m    146\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCannot convert non-finite values (NA or inf) to integer\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    147\u001b[0m     )\n\u001b[1;32m    148\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dtype\u001b[38;5;241m.\u001b[39mkind \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mu\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    149\u001b[0m     \u001b[38;5;66;03m# GH#45151\u001b[39;00m\n\u001b[1;32m    150\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (values \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39mall():\n","\u001b[0;31mIntCastingNaNError\u001b[0m: Cannot convert non-finite values (NA or inf) to integer"],"ename":"IntCastingNaNError","evalue":"Cannot convert non-finite values (NA or inf) to integer","output_type":"error"}]},{"cell_type":"code","source":"purchase_df['BOX_ID'].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.719437Z","iopub.status.idle":"2024-04-18T09:38:13.720051Z","shell.execute_reply.started":"2024-04-18T09:38:13.719779Z","shell.execute_reply":"2024-04-18T09:38:13.719802Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"purchase_df['BOX_ID'].isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.723997Z","iopub.status.idle":"2024-04-18T09:38:13.725203Z","shell.execute_reply.started":"2024-04-18T09:38:13.724859Z","shell.execute_reply":"2024-04-18T09:38:13.724885Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"purchase_df[purchase_df['BOX_ID'].isna()]","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.727037Z","iopub.status.idle":"2024-04-18T09:38:13.728061Z","shell.execute_reply.started":"2024-04-18T09:38:13.727773Z","shell.execute_reply":"2024-04-18T09:38:13.727798Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"purchase_df.dropna(subset=['BOX_ID'], inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.729879Z","iopub.status.idle":"2024-04-18T09:38:13.730915Z","shell.execute_reply.started":"2024-04-18T09:38:13.730630Z","shell.execute_reply":"2024-04-18T09:38:13.730655Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df = purchase_df.merge(boxs_df, on = 'BOX_ID', suffixes=('_Pur','_Box'))\nwork_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.732354Z","iopub.status.idle":"2024-04-18T09:38:13.732802Z","shell.execute_reply.started":"2024-04-18T09:38:13.732594Z","shell.execute_reply":"2024-04-18T09:38:13.732612Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.734479Z","iopub.status.idle":"2024-04-18T09:38:13.735243Z","shell.execute_reply.started":"2024-04-18T09:38:13.735029Z","shell.execute_reply":"2024-04-18T09:38:13.735048Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df['PURCHASE_DATE'] = pd.to_datetime(work_df['PURCHASE_DATE'], format='%d/%m/%Y')\nwork_df['Day'] = work_df['PURCHASE_DATE'].dt.day","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.736945Z","iopub.status.idle":"2024-04-18T09:38:13.737485Z","shell.execute_reply.started":"2024-04-18T09:38:13.737218Z","shell.execute_reply":"2024-04-18T09:38:13.737243Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df.columns","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.738735Z","iopub.status.idle":"2024-04-18T09:38:13.739291Z","shell.execute_reply.started":"2024-04-18T09:38:13.739009Z","shell.execute_reply":"2024-04-18T09:38:13.739033Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df[work_df['Day']<=15]['MAGIC_KEY'].nunique()# 1240412 Magic_Key non unique","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.740508Z","iopub.status.idle":"2024-04-18T09:38:13.741035Z","shell.execute_reply.started":"2024-04-18T09:38:13.740771Z","shell.execute_reply":"2024-04-18T09:38:13.740793Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df[work_df['Day']<=15]['BOX_ID'].nunique()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.742550Z","iopub.status.idle":"2024-04-18T09:38:13.743066Z","shell.execute_reply.started":"2024-04-18T09:38:13.742798Z","shell.execute_reply":"2024-04-18T09:38:13.742820Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df[work_df['Day']>15]['BOX_ID'].nunique()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.744405Z","iopub.status.idle":"2024-04-18T09:38:13.744940Z","shell.execute_reply.started":"2024-04-18T09:38:13.744670Z","shell.execute_reply":"2024-04-18T09:38:13.744694Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df['MAGIC_KEY'].nunique()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.746575Z","iopub.status.idle":"2024-04-18T09:38:13.747315Z","shell.execute_reply.started":"2024-04-18T09:38:13.747030Z","shell.execute_reply":"2024-04-18T09:38:13.747053Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df[work_df['Day']>15]['MAGIC_KEY'].nunique()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.749043Z","iopub.status.idle":"2024-04-18T09:38:13.751853Z","shell.execute_reply.started":"2024-04-18T09:38:13.751571Z","shell.execute_reply":"2024-04-18T09:38:13.751596Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Magic_list = work_df[work_df['Day']<=15]['MAGIC_KEY'].tolist()\nBox_list = work_df[work_df['Day']<=15]['BOX_ID'].tolist()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.753069Z","iopub.status.idle":"2024-04-18T09:38:13.753995Z","shell.execute_reply.started":"2024-04-18T09:38:13.753720Z","shell.execute_reply":"2024-04-18T09:38:13.753744Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import re\n\ndef replace_alphabet_with_position(s):\n    return ''.join(str(ord(char) - ord('A')) if char.isalpha() else char for char in s)\n\nwork_df['MAGIC_KEY_REP'] = work_df['MAGIC_KEY'].apply(replace_alphabet_with_position)\n\n#work_df[['MAGIC_KEY', 'MAGIC_KEY_REP']]\nwork_df['MAGIC_KEY_REP'] = work_df['MAGIC_KEY_REP'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.755836Z","iopub.status.idle":"2024-04-18T09:38:13.756369Z","shell.execute_reply.started":"2024-04-18T09:38:13.756091Z","shell.execute_reply":"2024-04-18T09:38:13.756123Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df['Buy'] = ((work_df['MAGIC_KEY'].isin(Magic_list)) & (work_df['BOX_ID'].isin(Box_list))).map({True: 1, False: 0})","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.757923Z","iopub.status.idle":"2024-04-18T09:38:13.759186Z","shell.execute_reply.started":"2024-04-18T09:38:13.758894Z","shell.execute_reply":"2024-04-18T09:38:13.758918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"work_df['Buy'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.760410Z","iopub.status.idle":"2024-04-18T09:38:13.761203Z","shell.execute_reply.started":"2024-04-18T09:38:13.760910Z","shell.execute_reply":"2024-04-18T09:38:13.760935Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = work_df['MAGIC_KEY_REP'].values.reshape(-1, 1)\ny = work_df['Buy']","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.762638Z","iopub.status.idle":"2024-04-18T09:38:13.763641Z","shell.execute_reply.started":"2024-04-18T09:38:13.763337Z","shell.execute_reply":"2024-04-18T09:38:13.763360Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.80, random_state=27)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.765015Z","iopub.status.idle":"2024-04-18T09:38:13.765794Z","shell.execute_reply.started":"2024-04-18T09:38:13.765490Z","shell.execute_reply":"2024-04-18T09:38:13.765513Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"LR = LogisticRegression()\n\nM_LR=LR.fit(X_train, y_train)\n\ny_pred = t.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.767209Z","iopub.status.idle":"2024-04-18T09:38:13.768125Z","shell.execute_reply.started":"2024-04-18T09:38:13.767842Z","shell.execute_reply":"2024-04-18T09:38:13.767865Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prob_df = pd.read_csv('/kaggle/input/robi-datathon-30-qualifier-problem-1/problem 1.csv')","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.769637Z","iopub.status.idle":"2024-04-18T09:38:13.770320Z","shell.execute_reply.started":"2024-04-18T09:38:13.770019Z","shell.execute_reply":"2024-04-18T09:38:13.770041Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prob_df['MAGIC_KEY_REP'] = prob_df['MAGIC_KEY'].apply(replace_alphabet_with_position)\n\nprob_df[['MAGIC_KEY', 'MAGIC_KEY_REP']]","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.772082Z","iopub.status.idle":"2024-04-18T09:38:13.772626Z","shell.execute_reply.started":"2024-04-18T09:38:13.772345Z","shell.execute_reply":"2024-04-18T09:38:13.772367Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"M_LR.predict(prob_df['MAGIC_KEY_REP'].values.reshape(-1, 1)).dataframe()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.774410Z","iopub.status.idle":"2024-04-18T09:38:13.774941Z","shell.execute_reply.started":"2024-04-18T09:38:13.774678Z","shell.execute_reply":"2024-04-18T09:38:13.774701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions = M_LR.predict(prob_df['MAGIC_KEY_REP'].values.reshape(-1, 1))\n\n# Create a DataFrame from predictions\npredictions_df = pd.DataFrame(predictions, columns=['PURCHASE'])\n\nprint(predictions_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.776967Z","iopub.status.idle":"2024-04-18T09:38:13.777476Z","shell.execute_reply.started":"2024-04-18T09:38:13.777216Z","shell.execute_reply":"2024-04-18T09:38:13.777238Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Concatenate prob_df and predictions_df\nconcatenated_df = pd.concat([prob_df, predictions_df], axis=1)\n\nprint(concatenated_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.778863Z","iopub.status.idle":"2024-04-18T09:38:13.779380Z","shell.execute_reply.started":"2024-04-18T09:38:13.779103Z","shell.execute_reply":"2024-04-18T09:38:13.779135Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"concatenated_df.drop('MAGIC_KEY_REP', axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.780892Z","iopub.status.idle":"2024-04-18T09:38:13.781432Z","shell.execute_reply.started":"2024-04-18T09:38:13.781147Z","shell.execute_reply":"2024-04-18T09:38:13.781170Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"concatenated_df.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T09:38:13.782762Z","iopub.status.idle":"2024-04-18T09:38:13.783287Z","shell.execute_reply.started":"2024-04-18T09:38:13.783005Z","shell.execute_reply":"2024-04-18T09:38:13.783027Z"},"trusted":true},"execution_count":null,"outputs":[]}]}